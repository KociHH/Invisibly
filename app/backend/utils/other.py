from fastapi import HTTPException
from fastapi.responses import HTMLResponse
from app.backend.data.redis.instance import __redis_save_sql_call__
import logging
import smtplib
from email.message import EmailMessage
import random
from fastapi import Depends
from app.backend.data.redis.utils import RedisJsons, redis_return_data
from app.backend.utils.dependencies import template_not_found_user
from app.backend.utils.user import UserInfo, path_html
from config.env import SMTP_EMAIL, SMTP_HOST, SMTP_PASS, SMTP_PORT

logger = logging.getLogger(__name__)



def send_code_email(
        email_to: str,
        cause: str,
        size_code: int = 6,
        ) -> dict:
    """
    email_to: –ù–∞ –∫–∞–∫–æ–π –∞–¥—Ä–µ—Å –ø–æ—á—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å

    cause: –ü—Ä–∏—á–∏–Ω–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: –í–∞—à –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –∫–æ–¥ {cause}

    size_code: –°–∫–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä –±—É–¥–µ—Ç –≤ –∫–æ–¥–µ

    example: (
        email: python@gmail.com
        cause: –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
        size_code: 6
        )

    return example: (
        {"succsess": True, "code": 123456, "message": "Email sent"} 

        C –æ—à–∏–±–∫–æ–π:
        {"succsess": False, "error": "Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω"}
        )
    """

    if size_code <= 2:
        logger.warning(f"–ê—Ä–≥—É–º–µ–Ω—Ç size_code <= 2. –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ –º–∞–ª–æ–µ —á–∏—Å–ª–æ: {size_code}")
        return {"success": False, "error": "Invalid code size"}

    min_code = 10 ** (size_code - 1)
    max_code = (10 ** size_code) - 1
    code = random.randint(min_code, max_code)

    msg = EmailMessage()
    msg["From"] = SMTP_EMAIL
    msg["To"] = email_to
    msg["Subject"] = "üë§ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏"
    msg.set_content(f"""
    –í–∞—à –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –∫–æ–¥ {cause}:\n\n
    ++++++++++++++++++\n
    {code}\n
    ++++++++++++++++++\n\n
    """)

    try:
        with smtplib.SMTP(SMTP_HOST, SMTP_PORT) as server:
            server.starttls()
            server.login(SMTP_EMAIL, SMTP_PASS)
            server.send_message(msg)
        
        logger.info(f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email: {email_to}")
        return {"success": True, "code": code, "message": "Email sent"}
        
    except smtplib.SMTPAuthenticationError:
        error_msg = "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ SMTP"
        logger.error(f"{error_msg} –¥–ª—è email: {email_to}")
        return {"success": False, "error": error_msg}
        
    except smtplib.SMTPRecipientsRefused:
        error_msg = "Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω"
        logger.error(f"{error_msg}: {email_to}")
        return {"success": False, "error": error_msg}
        
    except smtplib.SMTPServerDisconnected:
        error_msg = "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SMTP —Å–µ—Ä–≤–µ—Ä–æ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ"
        logger.error(f"{error_msg} –¥–ª—è email: {email_to}")
        return {"success": False, "error": error_msg}
        
    except smtplib.SMTPException as e:
        error_msg = f"–û—à–∏–±–∫–∞ SMTP: {str(e)}"
        logger.error(f"{error_msg} –¥–ª—è email: {email_to}")
        return {"success": False, "error": error_msg}
        
    except Exception as e:
        error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        logger.error(f"{error_msg} –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email –Ω–∞: {email_to}")
        return {"success": False, "error": error_msg}
    
async def short_settings_profile(
        user_info: UserInfo,

        ):
    user_id = user_info.user_id
    rj_edit = RedisJsons(user_id, "edit_profile")

    obj: dict = redis_return_data(items=["name", "login", "bio", "email"], key_data=rj_edit.name_key)
    if obj.get("redis") == "empty":
        user = await user_info.get_user_info(w_pswd=False, w_email_hash=False)
        new_data = rj_edit.save_sql_call("edit_profile", {
            "name": user.get("name"),
            "surname": user.get("surname"),
            "login": user.get("login"),
            "bio": user.get("bio"),
            "email": user.get("email"),
        })
        if not new_data:
            logger.error("–ù–µ –≤–µ—Ä–Ω—É–ª–æ—Å—å –∑–Ω–∞—á–µ–Ω–∏–µ, –ª–∏–±–æ –æ–∂–∏–¥–∞–ª–æ—Å—å –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ save_sql_call")
            raise HTTPException(status_code=500, detail="Server error")
        
        obj = new_data

async def full_name_constructor(name: str, surname: str, if_isnone: str) -> str:
    full_name = ""
    if name:
        full_name += name
    if surname and name:
        full_name += f" {surname}"
    else:
        full_name = surname if surname else if_isnone
    return full_name