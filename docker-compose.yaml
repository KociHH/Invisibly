services:
    redis:
      image: redis:7-alpine
      restart: always
      healthcheck:
        test: ["CMD-SHELL", "redis-cli -h 127.0.0.1 -p 6379 ping | grep -q PONG"]
        interval: 10s
        timeout: 5s
        retries: 5
      volumes:
        - redis_data:/data
      networks: 
       - app_net

    postgres:
      image: postgres:15-alpine
      environment:
        POSTGRES_DB: "${PG_DB_NAME}"
        POSTGRES_USER: "${PG_NAME}"
        POSTGRES_PASSWORD: "${PG_PASSWORD}"
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U ${PG_NAME} -d ${PG_DB_NAME} || exit 1"]
        interval: 10s
        timeout: 5s
        retries: 5
      restart: unless-stopped
      volumes:
        - postgres_data:/var/lib/postgresql/data
      networks: 
       - app_net

    rabbitmq:
      image: rabbitmq:3-management-alpine
      environment:
        RABBITMQ_DEFAULT_USER: "${RABBITMQ_USER}"
        RABBITMQ_DEFAULT_PASS: "${RABBITMQ_PASSWORD}"
      healthcheck:
        test: ["CMD", "rabbitmq-diagnostics", "ping"]
        interval: 20s
        timeout: 10s
        retries: 5
      restart: unless-stopped
      volumes:
        - rabbitmq_data:/var/lib/rabbitmq
      ports:
      - "5672:5672"
      - "15672:15672"
      networks: 
       - app_net

    service_free:
      build:
        context: .
        dockerfile: service_free/Dockerfile
      ports: 
        - "${SERVICE_FREE_PORT}:${SERVICE_FREE_PORT}"
      env_file:
        - ".env"
      depends_on:
        postgres:
          condition: service_healthy
        rabbitmq:
          condition: service_healthy
        redis:
          condition: service_healthy
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:${SERVICE_FREE_PORT}/health"]
        interval: 15s
        timeout: 10s
        retries: 5
        start_period: 30s
      networks: 
       - app_net

    service_admin:
      build:
        context: .
        dockerfile: service_admin/Dockerfile
      
      ports: 
        - "${SERVICE_ADMIN_PORT}:${SERVICE_ADMIN_PORT}"
      env_file:
        - ".env"
      depends_on:
        postgres:
          condition: service_healthy
        rabbitmq:
          condition: service_healthy
        redis:
          condition: service_healthy
      networks: 
       - app_net

    service_chat:
      build:
        context: .
        dockerfile: service_chat/Dockerfile
      
      ports: 
        - "${SERVICE_CHAT_PORT}:${SERVICE_CHAT_PORT}"
      env_file:
        - ".env"
      depends_on:
        postgres:
          condition: service_healthy
        rabbitmq:
          condition: service_healthy
        redis:
          condition: service_healthy
      networks: 
       - app_net

    service_friends:
      build:
        context: .
        dockerfile: service_friends/Dockerfile
      ports: 
        - "${SERVICE_NOTIFICATIONS_PORT}:${SERVICE_NOTIFICATIONS_PORT}"
      env_file:
        - ".env"
      depends_on:
        postgres:
          condition: service_healthy
        rabbitmq:
          condition: service_healthy
        redis:
          condition: service_healthy
      networks: 
       - app_net

    service_notifications:
      build:
        context: .
        dockerfile: service_notifications/Dockerfile
      ports: 
        - "${SERVICE_PROFILE_PORT}:${SERVICE_PROFILE_PORT}"
      env_file:
        - ".env"
      depends_on:
        postgres:
          condition: service_healthy
        rabbitmq:
          condition: service_healthy
        redis:
          condition: service_healthy
      networks:
        - app_net

    service_profile:
      build:
        context: .
        dockerfile: service_profile/Dockerfile
      ports: 
        - "${SERVICE_FRIENDS_PORT}:${SERVICE_FRIENDS_PORT}"
      env_file:
        - ".env"
      depends_on:
        postgres:
          condition: service_healthy
        rabbitmq:
          condition: service_healthy
        redis:
          condition: service_healthy
      networks: 
       - app_net

    service_security:
      build:
        context: .
        dockerfile: service_security/Dockerfile
      ports: 
        - "${SERVICE_SECURITY_PORT}:${SERVICE_SECURITY_PORT}"
      env_file:
        - ".env"
      depends_on:
        postgres:
          condition: service_healthy
        rabbitmq:
          condition: service_healthy
        redis:
          condition: service_healthy
      networks: 
       - app_net

    service_settings:
      build:
        context: .
        dockerfile: service_settings/Dockerfile
      ports: 
        - "${SERVICE_SETTINGS_PORT}:${SERVICE_SETTINGS_PORT}"
      env_file:
        - ".env"
      depends_on:
        postgres:
          condition: service_healthy
        rabbitmq:
          condition: service_healthy
        redis:
          condition: service_healthy
      networks: 
       - app_net

    service_frontend:
      build:
        context: .
        dockerfile: service_frontend/Dockerfile
      ports:
        - "8080:80"
      environment:
        SERVICE_FREE_HOST: "${SERVICE_FREE_HOST}"
        SERVICE_FREE_PORT: "${SERVICE_FREE_PORT}"
        
        SERVICE_ADMIN_HOST: "${SERVICE_ADMIN_HOST}"
        SERVICE_ADMIN_PORT: "${SERVICE_ADMIN_PORT}"
        
        SERVICE_CHAT_HOST: "${SERVICE_CHAT_HOST}"
        SERVICE_CHAT_PORT: "${SERVICE_CHAT_PORT}"
        
        SERVICE_FRIENDS_HOST: "${SERVICE_FRIENDS_HOST}"
        SERVICE_FRIENDS_PORT: "${SERVICE_FRIENDS_PORT}"
        
        SERVICE_NOTIFICATIONS_HOST: "${SERVICE_NOTIFICATIONS_HOST}"
        SERVICE_NOTIFICATIONS_PORT: "${SERVICE_NOTIFICATIONS_PORT}"
        
        SERVICE_PROFILE_HOST: "${SERVICE_PROFILE_HOST}"
        SERVICE_PROFILE_PORT: "${SERVICE_PROFILE_PORT}"

        SERVICE_SECURITY_HOST: "${SERVICE_SECURITY_HOST}"
        SERVICE_SECURITY_PORT: "${SERVICE_SECURITY_PORT}"

        SERVICE_SETTINGS_HOST: "${SERVICE_SETTINGS_HOST}"
        SERVICE_SETTINGS_PORT: "${SERVICE_SETTINGS_PORT}"
      networks: 
       - app_net

volumes:
  postgres_data:
  rabbitmq_data:
  redis_data:

networks:
  app_net:
    driver: bridge